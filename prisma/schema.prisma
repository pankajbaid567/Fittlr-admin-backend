// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  googleId    String  @id @unique
  email       String   @unique
  name        String?
  profileImg  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  FitnessToken FitnessToken?
  GymBooking  GymBooking[]
  WorkoutPlan WorkoutPlan[]
  tickets tickets[]
  gym         Gym?    // Add this relation field

  posts        Post[]
  comments     Comment[]
  likes        Like[]
  followers    Follow[]     @relation("Following")
  following    Follow[]     @relation("Followers")

  // Challenges
  sentChallenges    Challenge[] @relation("SentChallenges")
  receivedChallenges Challenge[] @relation("ReceivedChallenges")

}

model Admin {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  gymId       Int?     @unique
  gym         Gym?     @relation(fields: [gymId], references: [id])

}

model FitnessToken {
  id            Int      @id @default(autoincrement())
  access_token  String
  refresh_token String
  scope         String
  token_type    String
  expiry_date   Int
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [googleId])
}

model Gym {
  id            Int           @id @default(autoincrement())
  name          String
  location      String
  imageUrl      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  machines      Machine[]
  MaxCapacity   Int 
  currnt_users  Int 
  openingHours  OpeningHours[]
  admin         Admin?
  GymBooking    GymBooking[]
 userId        String?       @unique // This makes it a one-to-one relation
  user          User?         @relation(fields: [userId], references: [googleId])
}  


model OpeningHours {
  id          Int      @id @default(autoincrement())
  dayOfWeek   Int      // 0-6 for Sunday-Saturday
  openTime    String   // "HH:MM" format
  closeTime   String   // "HH:MM" format
  gymId       Int
  gym         Gym      @relation(fields: [gymId], references: [id])
}

model Machine {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  imageUrl    String
  No_Of_Uses  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  needService Boolean  @default(false)
  status      String   @default("active") // active, inactive, maintenance
  service     Service?
  gymId       Int
  gym         Gym      @relation(fields: [gymId], references: [id])
  MachineBooking MachineBooking[]
  Exercise    Exercise[]
  tickets     tickets[] // Relation to tickets
}

model Service {
  id          Int      @id @default(autoincrement())
  machine     Machine  @relation(fields: [machineId], references: [id])
  machineId           Int      @unique
  serviceDate         DateTime
  createdAt           DateTime @default(now())
  serviceIntervalHours Float   
  notes               String?  
  totalUsageHours     Float    @default(0)
}

model GymBooking {
  id          Int      @id @default(autoincrement())
  userId      String
  user        User     @relation(fields: [userId], references: [googleId])
  gymId       Int
  gym         Gym      @relation(fields: [gymId], references: [id])
  startTime   DateTime
  endTime     DateTime
  status      String   @default("confirmed") // confirmed, cancelled, completed
  createdAt   DateTime @default(now())
  machineBookings MachineBooking[]
}

model MachineBooking {
  id          Int       @id @default(autoincrement())
  bookingId   Int
  booking     GymBooking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  machineId   Int
  machine     Machine   @relation(fields: [machineId], references: [id])
  duration    Int       // in minutes
}

model WorkoutPlan {
  id          Int       @id @default(autoincrement())
  userId      String
  user        User      @relation(fields: [userId], references: [googleId])
  name        String
  description String?
  exercises   Exercise[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Exercise {
  id          Int       @id @default(autoincrement())
  name        String
  sets        Int?
  reps        Int?
  duration    Int?      // in minutes
  notes       String?
  planId      Int
  plan        WorkoutPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  machineId   Int?
  machine     Machine?  @relation(fields: [machineId], references: [id])
}

model tickets {
  id          Int       @id @default(autoincrement())
  userId      String
  user        User      @relation(fields: [userId], references: [googleId])
  title       String
  description String?
  status      String   @default("open") // open, closed
  ticketType  String   @default("user") // user, service
  machineId   Int?
  machine     Machine? @relation(fields: [machineId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model Post {
  id          String   @id @default(uuid())
  content     String
  imageUrl    String?  // Add this line - the ? makes it optional
  user        User     @relation(fields: [userId], references: [googleId])
  userId      String
  comments    Comment[]
  likes       Like[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model Comment {
  id          String   @id @default(uuid())
  content     String
  user        User     @relation(fields: [userId], references: [googleId])
  userId      String
  post        Post     @relation(fields: [postId], references: [id])
  postId      String
  likes       Like[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [googleId])
  userId    String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
  createdAt DateTime @default(now())

  // Add this compound unique constraint
  @@unique([userId, postId])
}

model Follow {
  id           String  @id @default(uuid())
  follower     User    @relation("Following", fields: [followerId], references: [googleId])
  followerId   String
  following    User    @relation("Followers", fields: [followingId], references: [googleId])
  followingId  String
  createdAt    DateTime @default(now())
}

enum ChallengeType {
  COUNT_BASED  // e.g., 50 Push-ups
  TIME_BASED   // e.g., Run for 10 minutes
}

enum ChallengeStatus {
  PENDING
  ACCEPTED
  COMPLETED
  REJECTED
}

model Challenge {
  id           String         @id @default(uuid())
  sender       User           @relation("SentChallenges", fields: [senderId], references: [googleId])
  senderId     String
  receiver     User           @relation("ReceivedChallenges", fields: [receiverId], references: [googleId])
  receiverId   String
  type         ChallengeType
  description  String
  count        Int?           // Only if type is COUNT_BASED (e.g., 50 Push-ups)
  duration     Int?           // Only if type is TIME_BASED (e.g., Run for 10 minutes)
  status       ChallengeStatus @default(PENDING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}